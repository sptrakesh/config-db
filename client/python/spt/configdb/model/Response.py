# automatically generated by the FlatBuffers compiler, do not modify

# namespace: model

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Response(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Response()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Response
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Response
    def ValueType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Response
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def ResponseStart(builder):
    builder.StartObject(2)

def Start(builder):
    ResponseStart(builder)

def ResponseAddValueType(builder, valueType):
    builder.PrependUint8Slot(0, valueType, 0)

def AddValueType(builder: flatbuffers.Builder, valueType: int):
    ResponseAddValueType(builder, valueType)

def ResponseAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def AddValue(builder: flatbuffers.Builder, value: int):
    ResponseAddValue(builder, value)

def ResponseEnd(builder):
    return builder.EndObject()

def End(builder):
    return ResponseEnd(builder)

import spt.configdb.model.KeyValueResults
import spt.configdb.model.ResultVariant
import spt.configdb.model.Success
try:
    from typing import Union
except:
    pass

class ResponseT(object):

    # ResponseT
    def __init__(self):
        self.valueType = 0  # type: int
        self.value = None  # type: Union[None, spt.configdb.model.KeyValueResults.KeyValueResultsT, spt.configdb.model.Success.SuccessT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        response = Response()
        response.Init(buf, pos)
        return cls.InitFromObj(response)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, response):
        x = ResponseT()
        x._UnPack(response)
        return x

    # ResponseT
    def _UnPack(self, response):
        if response is None:
            return
        self.valueType = response.ValueType()
        self.value = spt.configdb.model.ResultVariant.ResultVariantCreator(self.valueType, response.Value())

    # ResponseT
    def Pack(self, builder):
        if self.value is not None:
            value = self.value.Pack(builder)
        ResponseStart(builder)
        ResponseAddValueType(builder, self.valueType)
        if self.value is not None:
            ResponseAddValue(builder, value)
        response = ResponseEnd(builder)
        return response
