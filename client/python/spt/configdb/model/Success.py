# automatically generated by the FlatBuffers compiler, do not modify

# namespace: model

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Success(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Success()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSuccess(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Success
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Success
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def SuccessStart(builder): builder.StartObject(1)
def Start(builder):
    return SuccessStart(builder)
def SuccessAddValue(builder, value): builder.PrependBoolSlot(0, value, 0)
def AddValue(builder, value):
    return SuccessAddValue(builder, value)
def SuccessEnd(builder): return builder.EndObject()
def End(builder):
    return SuccessEnd(builder)

class SuccessT(object):

    # SuccessT
    def __init__(self):
        self.value = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        success = Success()
        success.Init(buf, pos)
        return cls.InitFromObj(success)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, success):
        x = SuccessT()
        x._UnPack(success)
        return x

    # SuccessT
    def _UnPack(self, success):
        if success is None:
            return
        self.value = success.Value()

    # SuccessT
    def Pack(self, builder):
        SuccessStart(builder)
        SuccessAddValue(builder, self.value)
        success = SuccessEnd(builder)
        return success
