# automatically generated by the FlatBuffers compiler, do not modify

# namespace: model

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Request(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Request()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRequest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Request
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Request
    def Action(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Request
    def Data(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from spt.configdb.model.KeyValue import KeyValue
            obj = KeyValue()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Request
    def DataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Request
    def DataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def RequestStart(builder):
    builder.StartObject(2)

def Start(builder):
    RequestStart(builder)

def RequestAddAction(builder, action):
    builder.PrependInt8Slot(0, action, 0)

def AddAction(builder, action):
    RequestAddAction(builder, action)

def RequestAddData(builder, data):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)

def AddData(builder, data):
    RequestAddData(builder, data)

def RequestStartDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDataVector(builder, numElems):
    return RequestStartDataVector(builder, numElems)

def RequestEnd(builder):
    return builder.EndObject()

def End(builder):
    return RequestEnd(builder)

import spt.configdb.model.KeyValue
try:
    from typing import List
except:
    pass

class RequestT(object):

    # RequestT
    def __init__(self):
        self.action = 0  # type: int
        self.data = None  # type: List[spt.configdb.model.KeyValue.KeyValueT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        request = Request()
        request.Init(buf, pos)
        return cls.InitFromObj(request)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, request):
        x = RequestT()
        x._UnPack(request)
        return x

    # RequestT
    def _UnPack(self, request):
        if request is None:
            return
        self.action = request.Action()
        if not request.DataIsNone():
            self.data = []
            for i in range(request.DataLength()):
                if request.Data(i) is None:
                    self.data.append(None)
                else:
                    keyValue_ = spt.configdb.model.KeyValue.KeyValueT.InitFromObj(request.Data(i))
                    self.data.append(keyValue_)

    # RequestT
    def Pack(self, builder):
        if self.data is not None:
            datalist = []
            for i in range(len(self.data)):
                datalist.append(self.data[i].Pack(builder))
            RequestStartDataVector(builder, len(self.data))
            for i in reversed(range(len(self.data))):
                builder.PrependUOffsetTRelative(datalist[i])
            data = builder.EndVector()
        RequestStart(builder)
        RequestAddAction(builder, self.action)
        if self.data is not None:
            RequestAddData(builder, data)
        request = RequestEnd(builder)
        return request
