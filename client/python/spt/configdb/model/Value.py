# automatically generated by the FlatBuffers compiler, do not modify

# namespace: model

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Value(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Value()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsValue(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Value
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Value
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def ValueStart(builder):
    builder.StartObject(1)

def Start(builder):
    ValueStart(builder)

def ValueAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def AddValue(builder, value):
    ValueAddValue(builder, value)

def ValueEnd(builder):
    return builder.EndObject()

def End(builder):
    return ValueEnd(builder)


class ValueT(object):

    # ValueT
    def __init__(self):
        self.value = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        value = Value()
        value.Init(buf, pos)
        return cls.InitFromObj(value)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, value):
        x = ValueT()
        x._UnPack(value)
        return x

    # ValueT
    def _UnPack(self, value):
        if value is None:
            return
        self.value = value.Value()

    # ValueT
    def Pack(self, builder):
        if self.value is not None:
            value = builder.CreateString(self.value)
        ValueStart(builder)
        if self.value is not None:
            ValueAddValue(builder, value)
        value = ValueEnd(builder)
        return value
