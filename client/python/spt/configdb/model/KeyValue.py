# automatically generated by the FlatBuffers compiler, do not modify

# namespace: model

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class KeyValue(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KeyValue()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKeyValue(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KeyValue
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # KeyValue
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # KeyValue
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # KeyValue
    def Options(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from spt.configdb.model.Options import Options
            obj = Options()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def KeyValueStart(builder):
    builder.StartObject(3)

def Start(builder):
    KeyValueStart(builder)

def KeyValueAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def AddKey(builder, key):
    KeyValueAddKey(builder, key)

def KeyValueAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def AddValue(builder, value):
    KeyValueAddValue(builder, value)

def KeyValueAddOptions(builder, options):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(options), 0)

def AddOptions(builder, options):
    KeyValueAddOptions(builder, options)

def KeyValueEnd(builder):
    return builder.EndObject()

def End(builder):
    return KeyValueEnd(builder)

import spt.configdb.model.Options
try:
    from typing import Optional
except:
    pass

class KeyValueT(object):

    # KeyValueT
    def __init__(self):
        self.key = None  # type: str
        self.value = None  # type: str
        self.options = None  # type: Optional[spt.configdb.model.Options.OptionsT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        keyValue = KeyValue()
        keyValue.Init(buf, pos)
        return cls.InitFromObj(keyValue)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, keyValue):
        x = KeyValueT()
        x._UnPack(keyValue)
        return x

    # KeyValueT
    def _UnPack(self, keyValue):
        if keyValue is None:
            return
        self.key = keyValue.Key()
        self.value = keyValue.Value()
        if keyValue.Options() is not None:
            self.options = spt.configdb.model.Options.OptionsT.InitFromObj(keyValue.Options())

    # KeyValueT
    def Pack(self, builder):
        if self.key is not None:
            key = builder.CreateString(self.key)
        if self.value is not None:
            value = builder.CreateString(self.value)
        if self.options is not None:
            options = self.options.Pack(builder)
        KeyValueStart(builder)
        if self.key is not None:
            KeyValueAddKey(builder, key)
        if self.value is not None:
            KeyValueAddValue(builder, value)
        if self.options is not None:
            KeyValueAddOptions(builder, options)
        keyValue = KeyValueEnd(builder)
        return keyValue
